<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hogwarts</title>
  
  <subtitle>Gryffindor</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-15T07:19:36.661Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sirius Black</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ssh端口转发</title>
    <link href="http://yoursite.com/2018/09/14/ssh_port_forwarding/"/>
    <id>http://yoursite.com/2018/09/14/ssh_port_forwarding/</id>
    <published>2018-09-14T11:43:23.000Z</published>
    <updated>2018-09-15T07:19:36.661Z</updated>
    
    <content type="html"><![CDATA[<p>ssh是secure shell的缩写，是专为远程登录会话和其他网络服务提供安全性的协议。传统的网络服务协议，如ftp、telnet等都是通过明文传输数据，是不安全的。ssh可以把你的传输数据进行加密，并且数据是经过压缩的可以节省流量。</p><h3 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h3><p>ssh有两种验证方式，分别是口令验证和密钥验证。</p><ul><li><p>口令验证就是通过账号和口令登录远程机器。</p></li><li><p>密钥验证是生成一个密钥对，将公钥放到远程服务器上，把私钥放在自己本地机器上。登录的时候远程主机会发来一串随机字符串，本地用私钥加密发回去，如果远程主机用公钥解密成功则认为这个用户合法，直接就可以登录成功。</p></li></ul><h3 id="最简单的用法"><a href="#最简单的用法" class="headerlink" title="最简单的用法"></a>最简单的用法</h3><p>ssh &lt;user>@&lt;host></p><p>user是想要登录远程主机的用户名，host是远程主机的地址，ssh默认使用的端口是22，如果想要指定端口可以用-p &lt;port>来指定，建议远程服务器修改一下ssh端口防止被攻击。下面是一个示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@88.88.88.88</span><br></pre></td></tr></table></figure><p>连接远程机器88.88.88.88，并用root用户登录。</p><h3 id="远程执行命令"><a href="#远程执行命令" class="headerlink" title="远程执行命令"></a>远程执行命令</h3><p>ssh可以登录到指定主机，然后执行命令。也可以在ssh命令后跟想要执行的命令，这样命令执行结束后就会直接退出登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@88.88.88.88 'jps'</span><br></pre></td></tr></table></figure><p>查看88.88.88.88这台机器用root用户运行的java程序。</p><h3 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h3><p>可以通过ssh绑定本地端口，将本地某个端口转发到远程主机的指定端口，如远程主机有一个http服务监听了8080端口，但是8080端口并不对公网开放，那么就可以用ssh转发来达到本地访问效果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 2121:127.0.0.1:8080 root@88.88.88.88 -p 4477</span><br></pre></td></tr></table></figure><p>这样就ssh就会监听本地2121端口，所以对本地2121端口的访问都会被转发到远程机器的8080端口上，当然也可以将127.0.0.1改成别的远程机器能访问到的ip。这里的-p是指定远程机器的ssh服务端口，我这边设置的是4477。</p><h3 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h3><p>本地执行ssh命令，可以指定让远程机器监听一个端口，所有对这个端口的访问都转发到本地，从而实现内网穿透。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R 7777:10.0.0.5:7000 root@88.88.88.88 -p 4477</span><br></pre></td></tr></table></figure><p>本地通过ssh连向远程机器，并让远程机器监听7777端口，所有对这个端口的访问都转发到本地机器。即对远程机器7777端口的访问和在本地访问10.0.0.5:7000地址效果是一样的。</p><p>这边我转发的是一个web服务，转发成功后在浏览器打开88.88.88.88:7777并不能正常打开，登录远程机器查看监听状态发现监听的是127.0.0.1的7777端口。这和sshd的安全机制有关，默认sshd只会转发127.0.0.1这个地址的端口，我们要实现转发所有ip可以在远程机器进行以下配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span> 将GatewayPorts配置成yes</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>再重新按照之前的步骤转发下远程端口，访问成功。</p><h3 id="转入后台运行"><a href="#转入后台运行" class="headerlink" title="转入后台运行"></a>转入后台运行</h3><p>前面的端口转发命令，当执行成功后就会进入远程的shell操作页面，当exit的时候，ssh连接也会断开。我们可以通过-N参数不让他进入远程sheel操作页面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -NR 7777:10.0.0.5:7000 root@88.88.88.88 -p4477</span><br></pre></td></tr></table></figure><p>这样还不够，我们希望能在后台运行，而不用一只维持一个打开的窗口。可以用-f参数指定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fNR 7777:10.0.0.5:7000 root@88.88.88.88 -p4477</span><br></pre></td></tr></table></figure><p>这样就可以操作本地shell或者关闭当前shell，后台运行的端口转发通道还是开着的。想要关闭可以用kill命令把进程杀死。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ssh是secure shell的缩写，是专为远程登录会话和其他网络服务提供安全性的协议。传统的网络服务协议，如ftp、telnet等都是通过明文传输数据，是不安全的。ssh可以把你的传输数据进行加密，并且数据是经过压缩的可以节省流量。&lt;/p&gt;
&lt;h3 id=&quot;验证方式&quot;&gt;
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Shell/Linux/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>jshell - Java官方的REPL工具</title>
    <link href="http://yoursite.com/2018/09/13/jshell/"/>
    <id>http://yoursite.com/2018/09/13/jshell/</id>
    <published>2018-09-13T12:15:13.000Z</published>
    <updated>2018-09-15T03:05:47.369Z</updated>
    
    <content type="html"><![CDATA[<p>Jshell是java9新出的基于Java语言的REPL(Read-Eval-Print Loop)命令行工具。它允许不适用类以及main方法就可以执行Java代码，类似于Python、JavaScript等脚本语言。可以说是一个非常好的工具，以后碰到需要测试否个不熟悉的方法或测试某个逻辑，再也不需要新建一个类写一个main方法或测试方法去运行，只要打开jshell输入命令执行就好了。</p><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ jshell</span><br><span class="line">|  Welcome to JShell -- Version 10.0.1</span><br><span class="line">|  For an introduction type: /help intro</span><br><span class="line"></span><br><span class="line"><span class="meta">jshell&gt;</span> System.out.println("Hello World!!!")</span><br><span class="line">Hello World!!!</span><br><span class="line"></span><br><span class="line"><span class="meta">jshell&gt;</span> /exit</span><br><span class="line">|  Goodbye</span><br></pre></td></tr></table></figure><p>在命令行直接输入jshell打开jshell交互界面，输入System.out.println(“Hello World!!!”)即可看到输出结果，最后输入/exit退出。</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>当一个表达式最终是返回一个值时，且没有显示指定该值的变量，那么jshell会自动将该对象的引用设置到一个系统生成的变量上，看下面的例子。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jshell&gt;</span> 1+1</span><br><span class="line"><span class="meta">$</span>3 ==&gt; 2</span><br><span class="line"><span class="meta">jshell&gt;</span> "Hello World!!!".substring(5)</span><br><span class="line"><span class="meta">$</span>4 ==&gt; " World!!!"</span><br></pre></td></tr></table></figure><p>1+1的结果是2，但是我们并没有将结果赋值给一个变量，所以jshell自动将结果值赋值给了他自己声明的变量$3上。继续看下面执行的语句，”Hello World!!!”.substring(5)，其实就是调用了String类的substring()方法。这里就衍生出一个问题，在测试的时候可能连自己都搞不清楚返回的值到底是什么类型的,可能一个不小心以为返回的值是String调用了substring方法，最后报错发现是int类型的。这里推荐进入jshell命令行时加一个参数-v打开详情模式，会在变量赋值后打印变量类型。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ jshell -v</span><br><span class="line">|  Welcome to JShell -- Version 10.0.1</span><br><span class="line">|  For an introduction type: /help intro</span><br><span class="line"></span><br><span class="line"><span class="meta">jshell&gt;</span> "Hello World!!!".substring(5)</span><br><span class="line"><span class="meta">$</span>1 ==&gt; " World!!!"</span><br><span class="line">|  created scratch variable $1 : String</span><br></pre></td></tr></table></figure><h3 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h3><p>声明方法也很简单，直接按照java中方法的格式一行一行输进去就可以。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jshell&gt;</span> String hello(String name) &#123;</span><br><span class="line">   ...&gt; return "Hello " + name;</span><br><span class="line">   ...&gt; &#125;</span><br><span class="line">|  created method hello(String)</span><br><span class="line"></span><br><span class="line"><span class="meta">jshell&gt;</span> hello($1)</span><br><span class="line"><span class="meta">$</span>6 ==&gt; "Hello 5"</span><br><span class="line">|  created scratch variable $6 : String</span><br></pre></td></tr></table></figure><p>想要修改方法声明，用同样的方法前面再输一次即可。</p><h3 id="辅助命令"><a href="#辅助命令" class="headerlink" title="辅助命令"></a>辅助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jshell&gt;</span> /vars</span><br><span class="line">|    String $1 = "5"</span><br><span class="line">|    String $6 = "Hello 5"</span><br><span class="line">|    String $8 = "Hi 5"</span><br><span class="line">|    int $10 = 0</span><br><span class="line"></span><br><span class="line"><span class="meta">jshell&gt;</span> /methods</span><br><span class="line">|    String hello(String)</span><br><span class="line">|    int hehe()</span><br><span class="line">|       which cannot be invoked until method what() is declared</span><br><span class="line"></span><br><span class="line"><span class="meta">jshell&gt;</span> /list</span><br><span class="line"></span><br><span class="line">   1 : "Hello World!!!".substring(5)</span><br><span class="line">   2 : $1 = "5"</span><br><span class="line">   3 : $1</span><br><span class="line">   4 : System.out.println($1)</span><br><span class="line">   6 : hello($1)</span><br><span class="line">   7 : String hello(String name) &#123;</span><br><span class="line">       return "Hi " + name;</span><br><span class="line">       &#125;</span><br><span class="line">   8 : hello($1)</span><br><span class="line">   9 : int hehe() &#123;</span><br><span class="line">       what();</span><br><span class="line">       return 1;</span><br><span class="line">       &#125;</span><br><span class="line">  10 : hehe()</span><br></pre></td></tr></table></figure><p>/vars列出当前所有变量，/methods列出当前声明的方法，/list类似于Linux的history列出命令历史<br>可以输入/<tab>来打印所有的辅助命令(没错，jshell支持tab键补全)</tab></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jshell&gt;</span> /</span><br><span class="line">/!          /?          /drop       /edit       /env        /exit       /help       /history    /imports    /list       </span><br><span class="line">/methods    /open       /reload     /reset      /save       /set        /types      /vars</span><br></pre></td></tr></table></figure><h3 id="执行jshell脚本"><a href="#执行jshell脚本" class="headerlink" title="执行jshell脚本"></a>执行jshell脚本</h3><p>可以通过编写脚本来执行jshell命令，像linux的shell脚本一样，然后通过jshell -s &lt;jshell_file&gt;来执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jshell --startup test_jshell.jsh</span><br></pre></td></tr></table></figure><p>推荐在脚本最后一行加入/exit，不然脚本执行完后会停留在jshell交互页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jshell是java9新出的基于Java语言的REPL(Read-Eval-Print Loop)命令行工具。它允许不适用类以及main方法就可以执行Java代码，类似于Python、JavaScript等脚本语言。可以说是一个非常好的工具，以后碰到需要测试否个不熟悉的方
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发包 - CopyOnWriteArrayList</title>
    <link href="http://yoursite.com/2018/08/29/copy_on_write_array_list/"/>
    <id>http://yoursite.com/2018/08/29/copy_on_write_array_list/</id>
    <published>2018-08-29T11:05:00.000Z</published>
    <updated>2018-08-29T09:51:21.820Z</updated>
    
    <content type="html"><![CDATA[<p>CopyOnWriteArrayList是JDK并发包里面的一个类，用于提供可以多线程并发访问的一个List结构。比较适合在读取多改动少的情景下使用，看名字就可知基本原理，是在写入的时候不直接操作原数组，而是重新拷贝一个新的数组在新的数组里进行写入操作。</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>先来看看这个类的继承结构，没有继承任何类，但是实现了4个接口，包括1个普通接口List和3个标记接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>List不用说，这是一个List基础操作接口。RandomAccess表式这个接口支持随机访问，即随机访问的时间复杂度是O(1)；Cloneable表示这个类可以被clone()；Serializable表示这个类可以被序列化和反序列化。</p><p>下面我们就用List操作中最常用的几个方法(get、add、remove、set)来分析CopyOnWriteArrayList是如何实现线程安全的。</p><h5 id="读取元素（get）"><a href="#读取元素（get）" class="headerlink" title="读取元素（get）"></a>读取元素（get）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">get</span><span class="params">(Object[] a, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连锁都没有，竟然比ArrayList还要简介！没什么可说的。</p><h5 id="添加元素（add）"><a href="#添加元素（add）" class="headerlink" title="添加元素（add）"></a>添加元素（add）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，add操作是加了锁的，也就是说同一时间只有一个线程可以进行add操作。看add操作的可以发现并没有修改原有的array对象，而是将原有的array对象重新拷贝了一份，对新拷贝的对象执行新增操作。所以在此期间对该数组的读取操作都还是在原有数组上。锁的目的有只有一个，保证同一时刻就一个线程对array引用赋值。而array变量的可见效则由volatile<br>关键字保证，因为读线程并不会加锁。</p><h5 id="根据下标删除元素（remove-index）"><a href="#根据下标删除元素（remove-index）" class="headerlink" title="根据下标删除元素（remove index）"></a>根据下标删除元素（remove index）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        E oldValue = get(elements, index);</span><br><span class="line">        <span class="keyword">int</span> numMoved = len - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">            setArray(Arrays.copyOf(elements, len - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] newElements = <span class="keyword">new</span> Object[len - <span class="number">1</span>];</span><br><span class="line">            System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">            System.arraycopy(elements, index + <span class="number">1</span>, newElements, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">            setArray(newElements);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>remove操作和add操作大同小异，因为加了锁，所以加锁段的代码可以肆无忌惮的写。逻辑也很简单，就是新建一个原数组长度-1的数组，将除了被删除元素的其他元素拷贝到新的数组，并将新的数组设置到array变量上。</p><h5 id="根据对象删除元素（remove-object）"><a href="#根据对象删除元素（remove-object）" class="headerlink" title="根据对象删除元素（remove object）"></a>根据对象删除元素（remove object）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Object[] snapshot = getArray();</span><br><span class="line">    <span class="keyword">int</span> index = indexOf(o, snapshot, <span class="number">0</span>, snapshot.length);</span><br><span class="line">    <span class="keyword">return</span> (index &lt; <span class="number">0</span>) ? <span class="keyword">false</span> : remove(o, snapshot, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o, Object[] snapshot, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] current = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = current.length;</span><br><span class="line">        <span class="keyword">if</span> (snapshot != current) findIndex: &#123;</span><br><span class="line">            <span class="keyword">int</span> prefix = Math.min(index, len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (current[i] != snapshot[i] &amp;&amp; eq(o, current[i])) &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                    <span class="keyword">break</span> findIndex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= len)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (current[index] == o)</span><br><span class="line">                <span class="keyword">break</span> findIndex;</span><br><span class="line">            index = indexOf(o, current, index, len);</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] newElements = <span class="keyword">new</span> Object[len - <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(current, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">        System.arraycopy(current, index + <span class="number">1</span>,</span><br><span class="line">                         newElements, index,</span><br><span class="line">                         len - index - <span class="number">1</span>);</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法稍微有点复杂，也是为了性能考虑。最终移除过程是由remove(Object o, Object[] snapshot, int index)方法操作的，在这之前先检查一下数组里面有没有对应的移除元素，这个过程是不需要加锁的，所以如果数组里没有被移除元素，这个移除方法调用并不会影响其他修改操作。</p><p>再来看看最终操作移除的方法remove(Object o, Object[] snapshot, int index)。因为在这期间数组可能已经发生了变化，如果是我来写，应该会暴力的再调用indexOf方法查找新数组里待删除元素index。而JDK做法则不然，也是对性能考虑到了极致。因为equals是用户自定义的方法，时间复杂度并不能确定，所以JDK代码中将equals方法的调用次数降到了最低。新数组分成两段判断，第一段是[0, Math.min(index, len)]，index是老数组里待删元素的index，len是新数组的长度。这段数组内的元素先判断新老数组是否相同(相同则表示这个元素没变过，因为老数组在index位置才找到元素，所以在这之前的元素都是不符合条件的。)，不相同才调用equals方法。第二段还是调用indexOf，用equals依次判断。</p><h5 id="指定index设置元素（set）"><a href="#指定index设置元素（set）" class="headerlink" title="指定index设置元素（set）"></a>指定index设置元素（set）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">set(<span class="keyword">int</span> index, E e)</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        E oldValue = get(elements, index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oldValue != element) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = elements.length;</span><br><span class="line">            Object[] newElements = Arrays.copyOf(elements, len);</span><br><span class="line">            newElements[index] = element;</span><br><span class="line">            setArray(newElements);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Not quite a no-op; ensures volatile write semantics</span></span><br><span class="line">            setArray(elements);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要设置的值和指定位置的值不一致则设置并替换数组，但是如果是一样的就比较有意思了，会将原数组重新设置到array变量上，看似是一个无用的操作，实则不然，可以看到作者还写了条注释解释了下。这其实牵涉到jdk约定的给所有java并发包(java.util.concurrent)里面的集合添加元素需要遵从的语义。贴一下官方文档解释</p><blockquote><p>Actions in a thread prior to placing an object into any concurrent collection happen-before actions subsequent to the access or removal of that element from the collection in another thread.</p></blockquote><p>翻译一下，将对象放入集合的操作和从集合中读取或删除对象操作之间存在happen-before关系。<br>这是jdk给并发包以及下面的子包所定义的语义，我们这里的set方法是怎么保证语义的呢？就是通过对volatile变量array的操作，如果把上面这句看似无用的代码删掉，那么就不能保证这种关系。这是我网上搜的更详细的解释</p><blockquote><p><a href="https://stackoverflow.com/questions/28772539/why-setarray-method-call-required-in-copyonwritearraylist" target="_blank" rel="noopener">https://stackoverflow.com/questions/28772539/why-setarray-method-call-required-in-copyonwritearraylist</a></p></blockquote><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>从源码可以看出，CopyOnWriteArrayList适合读多写少的场景，读的时候不加锁，效率和普通的ArrayList一样，但是写的时候开销很大，需要开一个新的数组将原有的对象原封不动的拷贝进去。所以CopyOnWriteArrayList没有扩容的概念，每次修改是生成一个新的数组。<br>此外，CopyOnWriteArrayList容器保证的是最终一致性，也就是说在写入方法返回前，你是不知道读取的值是写入前的还是写入后的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CopyOnWriteArrayList是JDK并发包里面的一个类，用于提供可以多线程并发访问的一个List结构。比较适合在读取多改动少的情景下使用，看名字就可知基本原理，是在写入的时候不直接操作原数组，而是重新拷贝一个新的数组在新的数组里进行写入操作。&lt;/p&gt;
&lt;h4 i
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="concurrent" scheme="http://yoursite.com/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>用Docker部署shadowsocks</title>
    <link href="http://yoursite.com/2018/08/27/deploy_shadowsocks_with_docker/"/>
    <id>http://yoursite.com/2018/08/27/deploy_shadowsocks_with_docker/</id>
    <published>2018-08-27T11:05:00.000Z</published>
    <updated>2018-08-29T09:55:55.869Z</updated>
    
    <content type="html"><![CDATA[<p>最近了解了下Docker容器的基础知识，就想着将自己服务器上的服务都容器化，方便管理，还能让机器保持整洁不需要安装稀奇古怪的依赖，直接pull一个对应服务的镜像就好了。</p><p>就先从shadowsocks开始吧，这篇主要就讲如何在linux机器上通过Docker部署一个Shadowsocks服务。</p><h3 id="下载容器"><a href="#下载容器" class="headerlink" title="下载容器"></a>下载容器</h3><p>docker pull mritd/shadowsocks</p><p>首先保证已经安装好Docker环境，通过一条命令就可以拉取远程的镜像。mritd/shadowsocks这个镜像是dockerhub上pull次数最多的shadowsocks服务镜像，我就以这个镜像来部署。这个镜像即成了shadowsocks-libev、kcptun、simple-obfs，我这里只用到shadowsocks-libev。</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>启动一个最简单的ss服务测试一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dt --name ss -p 6443:6443 mritd/shadowsocks -s "-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 --fast-open"</span><br></pre></td></tr></table></figure><p>依次分析各个参数作用。</p><p>-d 后台启动，如果不指定，退出后容器就会停止</p><p>—name 指定容器名字，后面进入容器、停止开始容器、删除容器等操作都可以通过指定容器名字来执行</p><p>-p 端口映射宿主主机的6443端口映射到容器6443端口</p><p>-s 指定ss-server命令后面的执行参数</p><p>执行上面的命令，用docker ps查看正在运行的容器状态，发现已经启动。本地用shadowsocks客户端连接可以连接成功，说明已经可以正常使用了。</p><h3 id="通过config-json配置服务"><a href="#通过config-json配置服务" class="headerlink" title="通过config.json配置服务"></a>通过config.json配置服务</h3><p>上面这种方式只支持单端口的ss服务，我之前的ss服务是通过json配置文件配置了多个服务端口。在github上提issue给镜像作者，给的答复是这个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dt --name ssserver -p 6443:6443 -p 6500:6500/udp -v `pwd`/config.json:/config.json mritd/shadowsocks -m "ss-server" -s "-c /config.json" -x -e "kcpserver" -k "-t 127.0.0.1:6443 -l :6500 -mode fast2"</span><br></pre></td></tr></table></figure><p>然而根据给定的配置，不能正常启动ss容器。没办法，提issue一来一回太麻烦了，自己研究吧。</p><p>上面通过指定-c config.json方式启动，容器直接结束了，也看不到输出信息。（我对docker不太熟，可能有方法看到输出信息）</p><p>只能先让容器起来，进容器看具体是什么问题。用能正常启动容器的命令挂在上config.json文件来启动，进入容器（docker exec -it ss bash）。</p><p>用ps -ef | grep ss查看当前ss服务的启动命令，发现输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash-4.4# ps -ef | grep ss</span><br><span class="line">    5 root      0:00 ss-server -s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 --fast-open</span><br><span class="line">   10 root      0:00 grep ss</span><br></pre></td></tr></table></figure><p>可以看到ss-server后面的参数就是docker执行时-s指定的参数。在容器中试一下直接用ss-server命令加上-c config.json参数来执行，打印出使用信息，应该是配置文件配置不正确导致的。</p><p>我的配置文件之前shadowsocks一直在使用的，但是我安装的是正常的shadowsocks服务，启动命令是ssserver，而这个镜像里面安装的是shadowsocks-libev服务，启动命令是ss-server。一查发现ss-server命令不支持.json配置文件启动，需要用ss-manager代替之。</p><p>在容器中执行命令ss-manager -c config.json，控制台输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-08-27 17:33:25 INFO: using the default manager address: 127.0.0.1:8839</span><br><span class="line">2018-08-27 17:33:25 INFO: using tcp fast open</span><br><span class="line">2018-08-27 17:33:25 INFO: running from root user</span><br><span class="line">2018-08-27 17:33:25 INFO: try to bind interface: 0.0.0.0, port: 6443</span><br><span class="line">2018-08-27 17:33:25 INFO: try to bind interface: 0.0.0.0, port: 6444</span><br></pre></td></tr></table></figure><p>已经绑定了我需要的端口，也没有报错，说明已经启动了。接下来就把这条命令移到容器启动的时候运行。</p><p>退出容器，docker stop ss、docker rm ss停止并删除之前的容器，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name ss -p 6400-6500:6400-6500 -v `pwd`/config.json:/config.json -e SS_CONFIG="-c /config.json" mritd/shadowsocks -m "ss-manager"</span><br></pre></td></tr></table></figure><p>-v用来挂在宿主主机的文件或目录到容器内，pwd是当前路径，这里将当前目录的config.json文件挂在到容器的/config.json路径下。</p><p>-e SS_CONFIG用来指定命令参数，和前面的-s指定参数效果一样。</p><p>-m 用来指定启动参数，之前默认是ss-server不符合我们的要求，改成ss-manager</p><p>-p 用来指定端口，因为我们想要映射多个端口，所有用<->来指定一串端口绑定</-></p><p>启动成功后用shadowsocks客户端连接，指定的两个端口都可以使用了。</p><p>进入最新的容器，用ps -ef | grep ss命令查看ss进程，输出如下信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 1 root      0:00 &#123;entrypoint.sh&#125; /bin/bash /entrypoint.sh -m ss-manager</span><br><span class="line"> 5 root      0:00 ss-manager -c /config.json</span><br><span class="line"> 7 root      0:00 ss-server --manager-address 127.0.0.1:8839 -f /root/.shadowsocks/.shadowsocks_6443.pid -c /root/.shadowsocks/.shadowsocks_6443.conf -t 300 --fast-open -s 0.0.0.0</span><br><span class="line"> 9 root      0:00 ss-server --manager-address 127.0.0.1:8839 -f /root/.shadowsocks/.shadowsocks_6444.pid -c /root/.shadowsocks/.shadowsocks_6444.conf -t 300 --fast-open -s 0.0.0.0</span><br><span class="line">33 root      0:00 grep ss</span><br></pre></td></tr></table></figure><p>说明ss-manager只是一个启动器，读取出配置，每个端口都起一个ss-server进程来监控。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近了解了下Docker容器的基础知识，就想着将自己服务器上的服务都容器化，方便管理，还能让机器保持整洁不需要安装稀奇古怪的依赖，直接pull一个对应服务的镜像就好了。&lt;/p&gt;
&lt;p&gt;就先从shadowsocks开始吧，这篇主要就讲如何在linux机器上通过Docker部署
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Shadowsocks" scheme="http://yoursite.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>JDK SPI实现原理</title>
    <link href="http://yoursite.com/2018/05/27/jdk_spi/"/>
    <id>http://yoursite.com/2018/05/27/jdk_spi/</id>
    <published>2018-05-27T11:05:00.000Z</published>
    <updated>2018-08-29T09:57:15.471Z</updated>
    
    <content type="html"><![CDATA[<p>SPI全称Service Provider Interface，是JDK官方提供的一种服务发现(look up)机制。</p><p>一般分为接口提供方和接口实现方，权威方提供接口标准（如JDBC标准，是由JDK提供的用于数据库连接的标准接口），接口实现方提供具体实现（如针对JDBC的mysql实现是由mysql官方提供的）。</p><p>下面我们通过mysql的实现来了解一下SPI具体是怎么工作的。</p><p>mysql-connector-java的jar包中，有META-INF/services/java.sql.Driver文件，内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.Driver</span><br><span class="line">com.mysql.fabric.jdbc.FabricMySQLDriver</span><br></pre></td></tr></table></figure><p>SPI约定提供方需要在META-INF/services/目录下创建以接口名(包括接口路径的全限定名)命名的文件，文件内容是这个接口的具体实现。</p><p>由此说明mysql-connector-java提供了java.sql.Driver的实现，并且提供了两个实现。</p><p>那JDK具体是通过什么方式来读取这个文件并加载具体实现类的呢？不着急找答案，我们先看看mysql包是怎么使用的。用mysql客户端获取一个连接的标准代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/wukong"</span>, username, password);</span><br></pre></td></tr></table></figure><p>DriverManager是JDK提供的一个支持类，因为不同版本实现有略微区别，逻辑还是相似的，我们以jdk10.0.1的代码为例分析。</p><p>getConnection()方法内部调用了<em>ensureDriversInitialized()</em>方法，这个方法职责就是用ServiceLoader加载所有的java.sql.Driver接口实现，最核心的代码就是下面几句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class="line">        Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (driversIterator.hasNext()) &#123;</span><br><span class="line">                driversIterator.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// Do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过ServiceLoader来指定具体的SPI接口并得到一个Iterator对象，在迭代这个迭代器的时候会去找指定路径的文件(这里就是META-INF/services/java.sql.Driver)，并给指定的实现创建对象。DriverManager约定将所有的驱动存在<em>registeredDrivers</em>对象里，mysql的做法是在com.mysql.jdbc.Driver里面加一个静态块初始化一个自身对象并把对象注册到DriverManager.registeredDrivers中。所以mysql这种实现方式com.mysql.jdbc.Driver类其实被实例化了两次，第一次在类初始化的时候执行的静态块中，这个对象是最终使用的对象；第二次实例化是ServiceLoader迭代器调用next()时会通过反射实例化一次对象，这个对象直接被DriverManager扔掉了。静态块向DriverManager注册的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们平时用mysql一般都只用com.mysql.jdbc.Driver类的实例化对象来操作，而META-INF/services/java.sql.Driver文件中声明了两个类实现，根据ServiceLoader类的加载规则，就算我们不使用com.mysql.fabric.jdbc.FabricMysqlDriver类实现，ServiceLoader也会帮我们实例化这个对象。而且在DriverManager根据指定url获取数据库连接时，DriverManager时遍历所有已注册的驱动依次尝试获取连接，直到拿到可用连接才会返回，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">    <span class="comment">// If the caller does not have permission to load the driver then</span></span><br><span class="line">    <span class="comment">// skip it.</span></span><br><span class="line">    <span class="keyword">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            println(<span class="string">"    trying "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">            Connection con = aDriver.driver.connect(url, info);</span><br><span class="line">            <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Success!</span></span><br><span class="line">                println(<span class="string">"getConnection returning "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                <span class="keyword">return</span> (con);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (reason == <span class="keyword">null</span>) &#123;</span><br><span class="line">                reason = ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">"    skipping: "</span> + aDriver.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这其实是一种资源浪费，内存中无缘无故多了一个com.mysql.fabric.jdbc.FabricMYSQLDriver类对象，而且不能被回收，获取Connection时也要根据具体的url依次判断每个Driver是否能根据此url来获取连接，效率并不是很高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SPI全称Service Provider Interface，是JDK官方提供的一种服务发现(look up)机制。&lt;/p&gt;
&lt;p&gt;一般分为接口提供方和接口实现方，权威方提供接口标准（如JDBC标准，是由JDK提供的用于数据库连接的标准接口），接口实现方提供具体实现（如针
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>spring scheme扩展</title>
    <link href="http://yoursite.com/2018/05/27/spring_custom_schema/"/>
    <id>http://yoursite.com/2018/05/27/spring_custom_schema/</id>
    <published>2018-05-27T11:05:00.000Z</published>
    <updated>2018-08-29T09:58:24.298Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看dubbo的代码，dubbo有属于自己的配置标签，可以在spring配置文件中使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">""</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">interface</span>=<span class="string">""</span> <span class="attr">check</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>诸如以上这些标签，都是dubbo程序自己根据需要创建的自定义表情。</p><p>Spring支持自建scheme来描述一些自定义的xml bean，对于普通开发者来说意义不大，但是对于一些第三方组件来说很有用，可以开发自己的标签来提供给用户配置。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>Spring通过解析xml的内容，通过namespace找到标签对应的xsd文件和解析器的类。先根据xsd的规则检验配置文件是否符合规则，再根据配置的NamespaceHandler将标签配置内容转换成Bean交给Spring管理。</p><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><p>下面通过一个简单的例子来看一下Spring自定义标签的过程。</p><h4 id="定义一个需要配置的Bean"><a href="#定义一个需要配置的Bean" class="headerlink" title="定义一个需要配置的Bean"></a>定义一个需要配置的Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据需要配置的Bean，定义一个xsd-XML-Schema-Definition-来描述这个需要配置的对象"><a href="#根据需要配置的Bean，定义一个xsd-XML-Schema-Definition-来描述这个需要配置的对象" class="headerlink" title="根据需要配置的Bean，定义一个xsd(XML Schema Definition)来描述这个需要配置的对象"></a>根据需要配置的Bean，定义一个xsd(XML Schema Definition)来描述这个需要配置的对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns</span>=<span class="string">"http://www.mycompany.com/schema/my"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetNamespace</span>=<span class="string">"http://www.mycompany.com/schema/my"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">attributeFormDefault</span>=<span class="string">"unqualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"xsd:ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span> <span class="attr">use</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"xsd:int"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"env"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"xsd:ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span> <span class="attr">use</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"xsd:boolean"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在spring配置文件中指定该xsd的namespace，并使用标签"><a href="#在spring配置文件中指定该xsd的namespace，并使用标签" class="headerlink" title="在spring配置文件中指定该xsd的namespace，并使用标签"></a>在spring配置文件中指定该xsd的namespace，并使用标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:my</span>=<span class="string">"http://www.mycompany.com/schema/my"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.mycompany.com/schema/my</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.mycompany.com/schema/my.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义标签的形式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my:user</span> <span class="attr">name</span>=<span class="string">"wyc"</span> <span class="attr">age</span>=<span class="string">"17"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my:env</span> <span class="attr">name</span>=<span class="string">"daily"</span> <span class="attr">test</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实例工厂的形式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateFormat"</span> <span class="attr">class</span>=<span class="string">"java.text.SimpleDateFormat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="写标签的解析器"><a href="#写标签的解析器" class="headerlink" title="写标签的解析器"></a>写标签的解析器</h4><p>我们定义了两个标签，需要写具体的解析器将xml元素解析成具体的bean，Spring提供了AbstractSingleBeanDefinitionParser抽象类来简化解析过程，我们只需关心转化过程就可以了。UserParser代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">        String name = element.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(element.getAttribute(<span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line">        element.setAttribute(<span class="string">"id"</span>, <span class="string">"userId"</span>);</span><br><span class="line">        builder.addPropertyValue(<span class="string">"name"</span>, name);</span><br><span class="line">        builder.addPropertyValue(<span class="string">"age"</span>, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析器需要一个NamespaceHandler来驱动，Spring同样提供了一个NamespaceHandlerSupport抽象类来简化驱动过程，我们只需要配置好标签对应的解析器就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"user"</span>, <span class="keyword">new</span> UserParser());</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"env"</span>, <span class="keyword">new</span> EnvParser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将具体的namespace配置和解析器连接起来"><a href="#将具体的namespace配置和解析器连接起来" class="headerlink" title="将具体的namespace配置和解析器连接起来"></a>将具体的namespace配置和解析器连接起来</h4><p>在第3步中，namespace中配置了<a href="http://www.mycompany.com/schema/my" target="_blank" rel="noopener">http://www.mycompany.com/schema/my</a> 和 <a href="http://www.mycompany.com/schema/my.xsd两个地址，实际上这两个地址是我们虚构的，并不是一个真实地址。我们需要在META-INF中指定他们的本地路径。在META-INF文件夹下新建两个文件spring.handlers和spring.schemas，内容分别如下" target="_blank" rel="noopener">http://www.mycompany.com/schema/my.xsd两个地址，实际上这两个地址是我们虚构的，并不是一个真实地址。我们需要在META-INF中指定他们的本地路径。在META-INF文件夹下新建两个文件spring.handlers和spring.schemas，内容分别如下</a></p><p>spring.handlers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.mycompany.com/schema/my=com.wyc.test.spring.scheme.UserNamespaceHandler</span><br></pre></td></tr></table></figure><p>spring.schemas</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.mycompany.com/schema/my.xsd=spring/scheme/wyc-demo.xsd</span><br></pre></td></tr></table></figure><p>spring.schemas是指定了对应的xsd地址，spring.handlers则指定了解析器的类地址。</p><p>这样启动spring容器后，spring就会根据配置初始化一个User对象和Env对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看dubbo的代码，dubbo有属于自己的配置标签，可以在spring配置文件中使用。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>spring exporter实现简单的RPC服务</title>
    <link href="http://yoursite.com/2018/03/27/spring_exporter/"/>
    <id>http://yoursite.com/2018/03/27/spring_exporter/</id>
    <published>2018-03-27T07:02:00.000Z</published>
    <updated>2018-08-28T09:30:29.709Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Exporter是属于Spring web模块的一个功能，能通过Spring简单的实现基于http协议的RPC服务。</p><p>下面就来配置一个简单的demo，假设项目已经搭建好Spring mvc环境。</p><blockquote><p>定义接口和具体实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"hello, %s"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口和实现的定义最好分别写在不同的module，因为远程客户端需要引用接口的定义，我们只需要给接口定义就可以，要隐藏接口具体实现。</p><blockquote><p>创建提供服务的Exporter</p></blockquote><p>在配置文件中创建实现类的Bean，并初始化一个HttpInvokerServiceExporter对象，然后将得到的Exporter对象映射到想要的url上。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.wyc.test.service.impl.UserService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userExporter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"service"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceInterface"</span> <span class="attr">value</span>=<span class="string">"com.wyc.test.service.IUserService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"urlMapping"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/userService"</span>&gt;</span>userExporter<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HttpInvokerServiceExporter对象可以和Controller对象一样，配置在HandlerMapping里面。</p><p>至此服务端就搭建完成了，下面来配置客户端。</p><blockquote><p>Spring配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"remoteHelloService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceUrl"</span> <span class="attr">value</span>=<span class="string">"http://localhost:9999/userService"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceInterface"</span> <span class="attr">value</span>=<span class="string">"com.wyc.test.service.IUserService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中serviceUrl就是之前搭建的服务端对应服务的url，serviceInterface是该服务的接口</p><blockquote><p>调用服务</p></blockquote><p>和普通bean的操作一样，直接拿到对应的bean调用方法就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String configPath = <span class="string">"spring-application.xml"</span>;</span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(configPath);</span><br><span class="line">IUserService userService = context.getBean(<span class="string">"remoteHelloService"</span>, IUserService.class);</span><br><span class="line">System.out.println(userService.sayHello(<span class="string">"wyc"</span>));</span><br></pre></td></tr></table></figure><p>分别运行服务的和客户端程序，能正常输出。</p><hr><p>其实spring远程RPC调用是基于org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter，而这个对象是依赖于servlet标准实现的，所以并不需要基于spring-mvc，只要是基于servlet的web项目都可以用，下面就用最简单的servlet来实现远程调用，客户端和上面一样，我只介绍服务的代码。</p><blockquote><p>创建一个Servlet</p></blockquote><p>创建一个servlet对象HelloServlet，在init()方法中创建HttpInvokerServiceExporter对象，并配置需要代理的接口和实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HttpInvokerServiceExporter exporter;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init();</span><br><span class="line">        exporter = <span class="keyword">new</span> HttpInvokerServiceExporter();</span><br><span class="line">        exporter.setService(<span class="keyword">new</span> UserService());</span><br><span class="line">        exporter.setServiceInterface(IUserService.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exporter.afterPropertiesSet();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        exporter.handleRequest(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpInvokerServiceExporter设置完后调用afterPropertiesSet()方法，doPost方法中直接调用handleRequest即可。</p><blockquote><p>web.xml配置</p></blockquote><p>然后在web.xml中配置对应的servlet地址，就和普通的servlet配置方式一样。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.wyc.test.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样服务端就配置好了，其实和Spring mvc方式大同小异，只是这种方式是最纯粹的。Spring mvc是通过DispatcherServlet分发请求，通过HandlerMapping分发到对应的Export。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Exporter是属于Spring web模块的一个功能，能通过Spring简单的实现基于http协议的RPC服务。&lt;/p&gt;
&lt;p&gt;下面就来配置一个简单的demo，假设项目已经搭建好Spring mvc环境。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义接口和
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Netty中的ByteBuf</title>
    <link href="http://yoursite.com/2018/02/13/netty_bytebuf/"/>
    <id>http://yoursite.com/2018/02/13/netty_bytebuf/</id>
    <published>2018-02-13T02:20:30.000Z</published>
    <updated>2018-08-28T07:15:02.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类结构简介"><a href="#类结构简介" class="headerlink" title="类结构简介"></a>类结构简介</h3><p><img src="http://wyc3146.github.io/img/AbstractByteBuf_impmentations.png" alt="ByteBuf的实现类结构图"></p><p>从图中可以看出，ByteBuf最重要的子类是AbstractByteBuf，其他四个除了EmptyByteBuf是实现了空ByteBuf外都是直接或者间接的引用AbstractByteBuf的。AbstractByteBuf有两个子类：AbstractDerivedByteBuf和AbstractReferenceCountedByteBuf，AbstractDerivedByteBuf的实现类也只是一层代理，并不会去实际操作数据；我们这里也主要讲下AbstractReferenceCountedByteBuf类及其实现类。</p><p>AbstractReferenceCountedByteBuf的实现类主要可以用两个维度去分类：Direct or Heap、Pooled or UnPooled（是否用了对象池）。</p><h4 id="Direct-or-Heap，内存用的是堆内存还是直接内存"><a href="#Direct-or-Heap，内存用的是堆内存还是直接内存" class="headerlink" title="Direct or Heap，内存用的是堆内存还是直接内存"></a>Direct or Heap，内存用的是堆内存还是直接内存</h4><p>HeapByteBuf，目前有两个buffer类是直接使用堆内存实现的，看名字就可以轻易找出来，就是UnpooledHeapByteBuf和PooledUnsafeDirectBytebuf。他们的特征是底层维护了一个字节数组(byte[])用来存储所需要的数据，所以内存是直接由JVM堆内存分配的。</p><p>DirectByteBuf，目前有三个buffer类是使用直接内存实现的，UnpooledUnsafeDirectByteBuf、UnpooledDirectByteBuf、PooledUnsafeDirectByteBuf以及PooledDirectByteBuf。这几个类是维护了一个DirectByteBuffer对象，由DirectByteBuffer对象申请对外内存来储存数据。</p><p>CompositeByteBuf，并不一定使用哪种内存方式，他只是将多个ByteBuf合并成一个进行操作，且无需拷贝。</p><h4 id="Pooled-or-UnPooled，是否使用了对象池技术"><a href="#Pooled-or-UnPooled，是否使用了对象池技术" class="headerlink" title="Pooled or UnPooled，是否使用了对象池技术"></a>Pooled or UnPooled，是否使用了对象池技术</h4><p>UnpooledByteBuf，没有使用对象池技术的ByteBuf</p><p>PooledBytebuf，使用了对象池技术的ByteBuf</p><h3 id="ByteBuf接口介绍"><a href="#ByteBuf接口介绍" class="headerlink" title="ByteBuf接口介绍"></a>ByteBuf接口介绍</h3><p>ByteBuf虽然定义的是一个抽象类，其实更像一个接口，没有实现任何方法。该类实现了ReferenceCounted接口，这个接口暂时还没去了解，看名字应该是引用计数相关，方便buffer使用完后释放。</p><p>为什么不直接用JDK提供的ByteBuffer进行数据传输呢？JKD自带的ByteBuffer有诸多局限性，比如不能自动扩展，读写共用一个指针等。BufferBuff内部维护了读写两个指针，可以更清晰的进行数据读写且不需要调用flip()方法进入读就绪。盗用一下netty文档上的示意图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------------------+------------------+------------------+</span><br><span class="line">| discardable bytes |  readable bytes  |  writable bytes  |</span><br><span class="line">|                   |     (CONTENT)    |                  |</span><br><span class="line">+-------------------+------------------+------------------+</span><br><span class="line">|                   |                  |                  |</span><br><span class="line">0      &lt;=      readerIndex   &lt;=   writerIndex    &lt;=    capacity</span><br></pre></td></tr></table></figure><p>ByteBuf用readerIndex和writerIndex两个指针将整个数据区域分成了三块，初始状态下readerIndex和writerIndex都是0。写入数据的时候，readable bytes这块会增加，相应的writable bytes这块会减小（不扩展的情况下）；读取数据的时候，readable bytes会减小，discardable bytes这块会增大；discardable 区理论上是已经没用的可丢弃的数据，可以通过discardReadBytes()方法把readable和writable区往前移。</p><p>如果一个操作让上面的不等式不成立此操作就会抛IndexOutOfBoundsException，write操作除外，write时会先检查writable bytes区大小，即使不够也会扩容，除非maxCapacity - writerIndex的值小于该操作写入的长度。操作之前可以通过ByteBuf接口提供的方法判断是否可写可读：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(buf.isWritableBytes() &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">  buf.writeInt(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(buf.isReadable()) &#123;</span><br><span class="line">  System.out.print(buf.readByte());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类结构简介&quot;&gt;&lt;a href=&quot;#类结构简介&quot; class=&quot;headerlink&quot; title=&quot;类结构简介&quot;&gt;&lt;/a&gt;类结构简介&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://wyc3146.github.io/img/AbstractByteBuf_imp
      
    
    </summary>
    
      <category term="netty" scheme="http://yoursite.com/categories/netty/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="netty" scheme="http://yoursite.com/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>Java中的位运算</title>
    <link href="http://yoursite.com/2018/02/12/bitwise_operation_in_java/"/>
    <id>http://yoursite.com/2018/02/12/bitwise_operation_in_java/</id>
    <published>2018-02-12T02:20:30.000Z</published>
    <updated>2018-08-28T07:13:54.292Z</updated>
    
    <content type="html"><![CDATA[<p>jdk源码中很多操作都涉及到位运算（如HashMap中取2^30用1 &lt;&lt; 30，ByteBuffer中将两个byte组成short用(short)((b1 &lt;&lt; 8) | (b0 &amp; 0xff))），因为计算机底层数据都是以二进制形式存储的，所有的运算最终其实都是转换成二进制进行位运算，所以直接位运算具有与生俱来的高效性。</p><blockquote><p>位运算符号</p></blockquote><p>&amp;    按位与运算        A &amp; B，每位进行比较，相同位都是1则此位结果为1，否则结果为0</p><p>|    按位或运算        A |  B，每位进行比较，相同位都是0则此位结果为0，否则结果为1</p><p>~     按位非运算        ~A，单元运算，每位取反</p><p>^     异或运算            A ^  B，每位进行比较，相同位值相同则此位结果为0，否则结果为1。也称不进位加法</p><p>&lt;&lt;    左移运算            A &lt;&lt; n，把所有位向左移动n位，右边空出来的n位用0填充</p><p>>>    右移运算            A &gt;&gt; n，把所有位向右移动n位，左边空出来的n位用原数的符号位填充</p><p>>>>    无符号右移运算    A &gt;&gt;&gt; n，把所有位向右移动n位，左边空出来的n位用0填充</p><p>主要讲讲右移运算与无符号右移运算，右移运算是将所有位位移后左边用符号位补齐，所以运算完后符号位不变。而无符号右移运算运算完后都会用0补齐，所以运算完后肯定是正数。</p><p>举个例子，对于十进制的数DEC(-101) = BIN(11111111 11111111 11111111 10011011)</p><p>对其进行右移运算的结果是：</p><p>BIN(11111111 11111111 11111111 10011011) &gt;&gt; 2 = BIN(11111111 11111111 11111111 11100110)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = -<span class="number">101</span> &gt;&gt; <span class="number">2</span>;<span class="comment">// 计算结果为-26</span></span><br></pre></td></tr></table></figure><p>对其进行无符号右移运算的结果是：</p><p>BIN(11111111 11111111 11111111 10011011) &gt;&gt; 2 = BIN(00111111 11111111 11111111 11100110)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = -<span class="number">101</span> &gt;&gt;&gt; <span class="number">2</span>;<span class="comment">// 计算结果为1073741798</span></span><br></pre></td></tr></table></figure><blockquote><p>基本数据类型间的转换</p></blockquote><p>在这里我们只关心四种正数类型的转换，byte、short、int、long</p><p>byte、short、int、long所能表示的范围是逐步扩大，前面能表示的范围是后面的一个子集。</p><p>所以将范围小的数据类型转换成范围大的数据类型，在Java中可以隐式转换且能保证值不变。如以下表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = -<span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> i = b;</span><br></pre></td></tr></table></figure><p>因为要保证值不变，所以从byte转成long的时候多出的24位用原始byte值的符号位填充：</p><p>BIN(11110101) -&gt; BIN(11111111 11111111 11111111 11110101)</p><p>将大范围的数据类型转成小范围的数据类型就有问题了，位数不够用！Java语言中对这种类型的转换也需要显示进行（强制类型转换），对于这种转换，做法很暴力，直接把多出来的高位抹去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10086</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br></pre></td></tr></table></figure><p>DEC(10086) = BIN(‭00000000 00000000 00100111 01100110‬) -&gt; BIN(01100110)</p><p>这种转换是很危险的，如果把一个范围不在-128~127的int类型的值强制转换为byte，将会得到一个和原值相差很大的数。（10086 -&gt; 102）</p><blockquote><p>在JDK中的使用</p></blockquote><p>来看看之前提到的ByteBuffer中根据两个byte组成一个有符号的short值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">short</span>)((b1 &lt;&lt; <span class="number">8</span>) | (b0 &amp; <span class="number">0xff</span>));</span><br></pre></td></tr></table></figure><p>首先需要了解，Java在对short和int类型的数进行位运算时会把他们转换成int类型的数在进行运算。</p><p>将两个byte转换成有符号的short值，理论上只需要把高位和低位拼在一起就好了，假设高位是0xXX，低位是0xYY，那么我们最终想要的值就是0xXXYY。最粗暴的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">short</span>)( (<span class="number">0</span>xXX &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span> + (<span class="number">0</span>xYY &amp; <span class="number">0xff</span>) )</span><br></pre></td></tr></table></figure><p>把得到的值直接强制转换成short(抹去左边16位的0)后就是我们想要的值。</p><p>注意到(0xXX &amp; 0xff) &lt;&lt; 8这个表达式和0xXX &lt;&lt; 8这个表达式唯一区别就是得到的数前面16位是0还是f，如果0xXX第一位是0那么两个表达式计算结果一样；如果0xXX第一位是1，那么</p><p>​    (0xXX &amp; 0xff) &lt;&lt; 8 –&gt; 0x0000XX00                0xXX &lt;&lt; 8 –&gt; 0xffffXX00</p><p>并不影响后16位的结果，而我们真正关心的只是后16位的值，前16位会在强转时被抹去，所以可以简化成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">short</span>)( <span class="number">0</span>xXX &lt;&lt; <span class="number">8</span> + (<span class="number">0</span>xYY &amp; <span class="number">0xff</span>) )</span><br></pre></td></tr></table></figure><p>第一步0xXX &lt;&lt; 8得到的后25~32位永远是0，第二步0xYY &amp; 0xff得到的17~24永远是0，所以这两个数的加法可以直接用|运算代替，可以转化最终成表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">short</span>)( <span class="number">0</span>xXX &lt;&lt; <span class="number">8</span> | (<span class="number">0</span>xYY) &amp; <span class="number">0xff</span> )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jdk源码中很多操作都涉及到位运算（如HashMap中取2^30用1 &amp;lt;&amp;lt; 30，ByteBuffer中将两个byte组成short用(short)((b1 &amp;lt;&amp;lt; 8) | (b0 &amp;amp; 0xff))），因为计算机底层数据都是以二进制形式存储的
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>mysql创建用户</title>
    <link href="http://yoursite.com/2017/09/29/mysql_create_user/"/>
    <id>http://yoursite.com/2017/09/29/mysql_create_user/</id>
    <published>2017-09-29T11:12:11.000Z</published>
    <updated>2018-09-10T11:15:52.040Z</updated>
    
    <content type="html"><![CDATA[<p>下面以添加用户test_user、将数据库test_database授权给test_user为例创建分配用户权限。</p><h4 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h4><p>允许指定ip段(192.168.1.0~192.168.1.255)用该用户访问数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &apos;test_user&apos;@&apos;192.168.1.%&apos; identified by &apos;123456&apos;</span><br></pre></td></tr></table></figure><p>@前面是新建用户的账号，@后面是可以访问到的ip，identified by后面跟该用户的初始密码。</p><p>也可以指定ip或者直接用%来表示允许所有地址访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &apos;test_user&apos;@&apos;%&apos; identified by &apos;123456&apos;</span><br></pre></td></tr></table></figure><h4 id="分配指定数据库权限"><a href="#分配指定数据库权限" class="headerlink" title="分配指定数据库权限"></a>分配指定数据库权限</h4><p>授予用户通过指定ip访问数据库的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on `test_database`.* to &apos;test_user&apos;@&apos;%&apos; ;</span><br></pre></td></tr></table></figure><p>也可以跳过创建用户步骤，直接用这个命令一起创建用户和分配表权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on `test_database`.* to &apos;test_user&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br></pre></td></tr></table></figure><h4 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h4><p>撤销指定用户的指定权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke all privileges ON `test_database`.* FROM &apos;test_user&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure><p>注意只能根据分配的权限去撤销，比如我给test_user用户分配了test_database.*的权限，撤销的时候不能只撤销这个库的某张表，只能全部撤销。</p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for &apos;user_test&apos;@&apos;%&apos; = PASSWORD(&apos;newpassword&apos;);</span><br></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &apos;user_test&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure><h4 id="刷新权限配置"><a href="#刷新权限配置" class="headerlink" title="刷新权限配置"></a>刷新权限配置</h4><p>注意，以上这些操作都需要通过刷新命令刷新进数据库缓存才能正式生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges ;</span><br></pre></td></tr></table></figure><h4 id="⚠️注意事项"><a href="#⚠️注意事项" class="headerlink" title="⚠️注意事项"></a>⚠️注意事项</h4><p>我在配置用户及权限的时候碰到一个问题，新增的用户如果加密码登录总是提示Access denied，但是所有用户都可以免密登录。最后发现是因为mysql.user表中有一条‘‘@’localhost’记录引起的，一些版本的mysql安装默认会有该用户，手动删除即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &apos;&apos;@&apos;localhost&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面以添加用户test_user、将数据库test_database授权给test_user为例创建分配用户权限。&lt;/p&gt;
&lt;h4 id=&quot;添加新用户&quot;&gt;&lt;a href=&quot;#添加新用户&quot; class=&quot;headerlink&quot; title=&quot;添加新用户&quot;&gt;&lt;/a&gt;添加新用户&lt;
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java类加载和个块代码运行时机</title>
    <link href="http://yoursite.com/2017/03/09/java_class_init_/"/>
    <id>http://yoursite.com/2017/03/09/java_class_init_/</id>
    <published>2017-03-09T12:52:00.000Z</published>
    <updated>2018-08-29T09:57:02.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java类从加载到卸载的生命周期</p></blockquote><p>加载(Loading)<br>  |                    1、获取对应类的二进制字节流<br>  |                    2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。<br>  ↓                    3、在堆中生成一个代表此类的java.lang.Class对象，作为方法区这些数据的访问入口。<br>验证(Verification)<br>  |                    1、文件格式验证(0xCAFEBABE，主、次版本号)<br>  |                    2、元数据验证<br>  |                    3、字节码验证<br>  ↓                    4、符号引用验证<br>准备(Preparation)<br>  |                    为类的静态变量分配内存并将其初始化为默认值(如static a=1,给a分配值0)，这些内存都将<br>  |                    在方法区中进行分配。<br>  ↓<br>解析(Resolution)<br>  |                    解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。<br>  ↓<br>初始化(Initialization)<br>  |                    执行类构造器<clinit>()方法。<clinit>()方法是由编译器自动收集类中的所有类变量的赋值<br>  |                    动作和静态语句块(static{}块)中的语句合并产生的。<br>  ↓<br>使用(Using)<br>  ↓<br>卸载(Unloading)</clinit></clinit></p><blockquote><p>几个例子来深入了解</p></blockquote><p>被重新初始化的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">StaticVariableInit singleTon = StaticVariableInit.getInstance();</span><br><span class="line">System.out.println(<span class="string">"count1="</span> + singleTon.count1);</span><br><span class="line">System.out.println(<span class="string">"count2="</span> + singleTon.count2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticVariableInit</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> StaticVariableInit instance = <span class="keyword">new</span> StaticVariableInit();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">StaticVariableInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">count1++;</span><br><span class="line">count2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticVariableInit <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、准备阶段，变量count1和count2都被赋值为0</p><p>2、初始化阶段开始，因为类构造器是按顺序执行赋值和静态语句块(static{})的，所以先执行new StaticVariableInit()，执行结束后count1和count2都为1</p><p>3、instance初始化完成后继续执行类构造器，count1没有赋值操作还是1，count2赋值为0</p><p>执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count1=<span class="number">1</span></span><br><span class="line">count2=<span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p>子类构造函数调用时会先调用父类的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"父类静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"父类非静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123; <span class="comment">// 构造</span></span><br><span class="line">System.out.println(<span class="string">"父类构造"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String obj)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类构造 obj"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"子类静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"子类非静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123; <span class="comment">// 构造</span></span><br><span class="line">System.out.println(<span class="string">"子类构造"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(String obj)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"子类构造 obj"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">B b = <span class="keyword">new</span> B(<span class="keyword">new</span> String());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类构造函数如果没有显示调用父类构造函数，那么会先调用父类的空构造。如果父类没有空构造那么必须显示指定要调用的父类构造函数，不然编译不会通过。</p><p>执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">父类静态方法</span><br><span class="line">子类静态方法</span><br><span class="line">父类非静态方法</span><br><span class="line">父类构造</span><br><span class="line">子类非静态方法</span><br><span class="line">子类构造 obj</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Text t1 = <span class="keyword">new</span> Text(<span class="string">"t1"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Text t2 = <span class="keyword">new</span> Text(<span class="string">"t2"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = print(<span class="string">"i"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n = <span class="number">99</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> j = print(<span class="string">"j"</span>);</span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">"构造块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">print(<span class="string">"静态块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Text</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">System.out.println((++k) + <span class="string">":"</span> + str + <span class="string">"   i="</span> + i + <span class="string">"    n="</span> + n);</span><br><span class="line">++i;</span><br><span class="line">++n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">System.out.println((++k) + <span class="string">":"</span> + str + <span class="string">"   i="</span> + i + <span class="string">"    n="</span> + n);</span><br><span class="line">++n;</span><br><span class="line"><span class="keyword">return</span> ++i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Text t = <span class="keyword">new</span> Text(<span class="string">"init"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:j   i=<span class="number">0</span>    n=<span class="number">0</span></span><br><span class="line"><span class="number">2</span>:构造块   i=<span class="number">1</span>    n=<span class="number">1</span></span><br><span class="line"><span class="number">3</span>:t1   i=<span class="number">2</span>    n=<span class="number">2</span></span><br><span class="line"><span class="number">4</span>:j   i=<span class="number">3</span>    n=<span class="number">3</span></span><br><span class="line"><span class="number">5</span>:构造块   i=<span class="number">4</span>    n=<span class="number">4</span></span><br><span class="line"><span class="number">6</span>:t2   i=<span class="number">5</span>    n=<span class="number">5</span></span><br><span class="line"><span class="number">7</span>:i   i=<span class="number">6</span>    n=<span class="number">6</span></span><br><span class="line"><span class="number">8</span>:静态块   i=<span class="number">7</span>    n=<span class="number">99</span></span><br><span class="line"><span class="number">9</span>:j   i=<span class="number">8</span>    n=<span class="number">100</span></span><br><span class="line"><span class="number">10</span>:构造块   i=<span class="number">9</span>    n=<span class="number">101</span></span><br><span class="line"><span class="number">11</span>:init   i=<span class="number">10</span>    n=<span class="number">102</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Java类从加载到卸载的生命周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加载(Loading)&lt;br&gt;  |                    1、获取对应类的二进制字节流&lt;br&gt;  |                    2、将这个字节
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM常用参数集合</title>
    <link href="http://yoursite.com/2017/03/08/jvm-option/"/>
    <id>http://yoursite.com/2017/03/08/jvm-option/</id>
    <published>2017-03-08T13:20:30.000Z</published>
    <updated>2018-08-28T07:14:51.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实用型，会影响运行时环境"><a href="#实用型，会影响运行时环境" class="headerlink" title="实用型，会影响运行时环境"></a>实用型，会影响运行时环境</h3><blockquote><p>堆大小 </p></blockquote><p>-Xms            初始堆大小，默认内存的1/64(1GB)</p><p>-Xmx            最大堆大小，默认物理内存的1/4 (&lt;1GB)</p><p>-Xmn            年轻带大小</p><p>-XX:MinHeapFreeRatio=40        FullGC后如果老年代剩余容量小于40%则扩容,默认是40</p><p>-XX:MaxHeapFreeRatio=70        FullGC后如果老年代剩余容量大于70%则缩容,默认是70</p><p>-XX:NewSize=5m                年轻带大小，和-Xmn同时存在则以-Xmn为主(hotspot 25.101-b13)</p><p>-XX:MetaspaceSize            1.8以后的永久带大小初始值</p><p>-XX:MaxMetaspaceSize        1.8以后的永久带最大值</p><p>-XX:Xss=512k                    线程栈大小</p><blockquote><p>配合GC</p></blockquote><p>-XX:+DisableEx                屏蔽System.gc()</p><p>-XX:MaxTenuringThreshold={n}        s区晋升最大次数</p><p>-XX:CMSInitiatingOccupancyFraction={n}    CMS触发百分比</p><p>-XX:+UseCMSCompactAtFullCollection        //CMS后进行碎片整理</p><p>-XX:CMSFullGCsBeforeCompaction={n}        //CMS若干次后进行一次碎片</p><p>-XX:ParalelCMSThreads                    //CMS线程数量</p><p>-XX:ParalelGCThreads                        指定GC线程数量</p><p>-XX:MaxGCPauseMills                        最大GC停顿时间</p><p>-XX:GCTimeRatio                            垃圾收集时间占总时间的比</p><p>大于3M的对象直接分配到old区,只能在ParNew和Serial使用,Parallel Scavenge不认识此参数</p><p>-XX:Pretenuresizethreshold=3145728        </p><p>每次Minor GC执行完以后，虚拟机会检查之前晋升到老年代的平均大小是否大于老年代的剩余空间大小，如果大于，则发起一次Full/Major GC，如果小于，则查看HandlePromotionFailure值是否允许担保失败，如果允许，那只会进行一次Minor GC。如果不允许失败，那么也要改为进行一次Full/Major GC</p><p>-XX:+HandlePromotionFailure</p><blockquote><p>锁相关</p></blockquote><p>-XX:+DoEscapeAnalysis             开启逃逸分析</p><p>-XX:+EliminateLocks                 锁消除,基于逃逸分析</p><blockquote><p>内存分配(<a href="http://www.cnblogs.com/java-zhao/p/5180492.html" target="_blank" rel="noopener">参考</a>)</p></blockquote><p> 在指针碰撞(Bump the Pointer)的内存分配方式中,为了防止每次给新对象分配内存都CAS申请内存,可以打开TLAB一次预先申请一小块内存给指定线程使用</p><p> 另一种分配方式是空闲列表(Free List) ，空闲列表需要CAS吗？</p><p>-XX:+UseTLAB                     打开本地线程分配缓冲区(Thread Local Allocation Buffer)</p><p> 对象中的fields都是按照longs/doubles、ints、short/chars、bytes/booleans、opps(Ordianary Object Points)顺序分配的</p><p>-XX:+CompactFields    将一些短类型插入header和long/doubles之间</p><blockquote><p>优化运行时环境</p></blockquote><p>-Xverify:none                        关闭字节码验证</p><p>关闭方法热度衰减。在指定时间内方法调用次数达不到即时编译器编译的要求，就会把方法调用次数减半</p><p>-XX:-UseCounterDecay            </p><p>-XX:CounterHalfLifeTime            通过此参数设置半衰期时间，单位秒</p><p>-XX:+PrintCompilation                打印被JIT编译的方法</p><p>System.gc()是否参与GC统计,默认为false.JVM会根据统计数据自适应调整GC参数</p><p>-XX:-UseAdaptiveSizePolicyWithSystemGC</p><p>-agentlib:hprof=cpu=times,interval=10    采样统计各个方法占用cpu时长</p><p>-XX:-UseGCOverheadLimit            提前预测JVM是否OOM</p><h3 id="辅助型，辅助排查"><a href="#辅助型，辅助排查" class="headerlink" title="辅助型，辅助排查"></a>辅助型，辅助排查</h3><blockquote><p>追踪初始化参数</p></blockquote><p>-XX:+PrintCommandLineFlags     打印用户指定的或者JVM根据环境自适应的参数</p><p>-XX:+PrintFlagsFinal             初始化完成后打印参数</p><blockquote><p>GC日志</p></blockquote><p>-XX:+PrintGC</p><p>-XX:+PrintGCDetails</p><p>-XX:+PrintGCDateStamps</p><p>-XX:+PrintHeapAtGC            在GC前后打印出Heap信息</p><p>-Xloggc:f:\gc.log</p><blockquote><p>堆日志</p></blockquote><p>-XX:+HeapDumpOnOutOfMemoryError         OOM时导出堆到文件</p><p>-XX:+HeapDumpPath                         堆导出的位置</p><p>-XX:+OnOutOfMemoryError                 OOM时执行一个脚本</p><blockquote><p>verbose</p></blockquote><p>-verbose:class                打印出加载的class信息</p><p>-verbose:gc                    打印出GC信息</p><p>-verbose:jni                    打印出native方法调用的相关情况</p><h3 id="命令查询"><a href="#命令查询" class="headerlink" title="命令查询"></a>命令查询</h3><p>jinfo -flag MaxTenuringThreshold {pid}        显示晋升阈值是多少，此命令可以查询当前JVM的某个参数</p><h4 id="remarks"><a href="#remarks" class="headerlink" title="remarks:"></a>remarks:</h4><p><em>remark1</em></p><p><a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="noopener">参考</a></p><p><em>remark2</em></p><p>著作权归作者所有。</p><p>商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>作者：匿名用户</p><p>链接：<a href="http://www.zhihu.com/question/21367720/answer/19970887" target="_blank" rel="noopener">http://www.zhihu.com/question/21367720/answer/19970887</a></p><p>来源：知乎</p><p>挖个坑，如果有人赞，我就把某大型网站的jvm启动参数贴上来。谢赞，填坑。</p><p>-server -Xmx2g -Xms2g -Xmn256m </p><p>-XX:PermSize=128m -Xss256k </p><p>-XX:+DisableExplicitGC </p><p>-XX:+UseConcMarkSweepGC </p><p>-XX:+CMSParallelRemarkEnabled </p><p>-XX:+UseCMSCompactAtFullCollection </p><p>-XX:LargePageSizeInBytes=128m </p><p>-XX:+UseFastAccessorMethods </p><p>-XX:+UseCMSInitiatingOccupancyOnly </p><p>-XX:CMSInitiatingOccupancyFraction=70</p><p>-Xmn和-Xmx之比大概是1:9，新生代内存太大会导致young gc时间较长，一个好的Web系统应该是每次http请求申请内存都能在young gc回收掉，full gc永不发生。所以xmn的值应该是保证够用（够http并发请求之用）的前提下最小。</p><p><em>remark3</em></p><p><img src="https://wyc3146.github.io/img/jvm_gc_option.jpg" alt=""></p><p>JDK1.7 update14的GC，有连线代表可以搭配使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实用型，会影响运行时环境&quot;&gt;&lt;a href=&quot;#实用型，会影响运行时环境&quot; class=&quot;headerlink&quot; title=&quot;实用型，会影响运行时环境&quot;&gt;&lt;/a&gt;实用型，会影响运行时环境&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;堆大小 &lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Shell遍历和创建目录</title>
    <link href="http://yoursite.com/2017/02/18/shell_read_and_create_dir/"/>
    <id>http://yoursite.com/2017/02/18/shell_read_and_create_dir/</id>
    <published>2017-02-18T10:30:30.000Z</published>
    <updated>2018-08-28T07:15:20.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需求：现在有一个文件处理脚本，可以将一个文件按一定规则处理并输出。<br>接收两个参数：<br>$1，文件输出路径<br>$2，原文件路径<br>现在需要写一个脚本，通过传递一个路径来把该路径下的所有文件都通过这个脚本处理并输出</p></blockquote><p>my_bash.sh 是文件处理脚本名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!bin/sh</span><br><span class="line"></span><br><span class="line">function searchFile() &#123;</span><br><span class="line">    # 参数是目录路径</span><br><span class="line">    out_root=$2</span><br><span class="line">    for file in $1</span><br><span class="line">    do</span><br><span class="line">        # 是文件则开始压缩</span><br><span class="line">        echo $file</span><br><span class="line">        if test -f $file</span><br><span class="line">        then</span><br><span class="line">            path=$&#123;file:$3&#125;</span><br><span class="line">            # %/* 从右边开始取第一个/然后把他右边的字符都删掉，因为创建目录不能用文件名去创建</span><br><span class="line">            dir=$out_root$&#123;path%/*&#125;</span><br><span class="line">            mkdir -p $dir</span><br><span class="line">            my_bash.sh "$2$path" "$file"</span><br><span class="line">        fi</span><br><span class="line">        if test -d $file</span><br><span class="line">        then</span><br><span class="line">            # $file不带/，所以加上/ </span><br><span class="line">            searchFile "$file/*" $2 $3</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input_dir=$1</span><br><span class="line">output_dir=$2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>如果路径最后一个字符是/，删除之</span><br><span class="line">if [ $&#123;input_dir:0-1&#125; == '/' ]</span><br><span class="line">then</span><br><span class="line">    input_dir=$&#123;input_dir%/*&#125;</span><br><span class="line">fi</span><br><span class="line">if [ $&#123;output_dir:0-1&#125; == '/' ]</span><br><span class="line">then</span><br><span class="line">    output_dir=$&#123;output_dir%/*&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 输入路径 输出路径 输入路径的长度</span><br><span class="line">searchFile $input_dir $output_dir $&#123;#input_dir&#125;</span><br></pre></td></tr></table></figure><p>两个参数，\$1 输入路径  \$输出路口</p><p>主要遇到的问题：</p><ul><li>用户输入的参数结尾有可能带/，也有可能不带/，所以在调用处理函数之前先统一格式</li><li>遍历文件夹，文件夹名后+*<em>（如/data1/\</em>）<em>表示该文件夹下所有子文件夹和文件组成的字符串 </em>（空格隔开）*</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;需求：现在有一个文件处理脚本，可以将一个文件按一定规则处理并输出。&lt;br&gt;接收两个参数：&lt;br&gt;$1，文件输出路径&lt;br&gt;$2，原文件路径&lt;br&gt;现在需要写一个脚本，通过传递一个路径来把该路径下的所有文件都通过这个脚本处理并输出&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
